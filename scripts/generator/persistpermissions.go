//go:build ignore
// +build ignore

/*
 *  Copyright IBM Corporation 2020, 2021
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

// This program generates dockerfiles.go. It can be invoked by running
// go generate
package main

import (
	"fmt"
	"os"
	"path/filepath"
	"strings"

	"github.com/sirupsen/logrus"
)

const (
	permissionsheader = `# Code generated by go generate; DO NOT EDIT.

#  Copyright IBM Corporation 2020, 2021
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#  	http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.

`
)

var permissions = map[string]string{}

func main() {
	directory := os.Args[1]
	permissionsFilePath := os.Args[2]

	permissionsString, err := getFilePermissions(directory)
	if err != nil {
		logrus.Errorf("Error while getting permissions : %s", err)
		return
	}

	err = os.WriteFile(permissionsFilePath, []byte(permissionsheader+permissionsString), 0644)
	if err != nil {
		logrus.Errorf("Error while getting permissions file : %s", err)
		return
	}
	logrus.Infof("Persisted permissions file %s", permissionsFilePath)
}

func getFilePermissions(path string) (permissions string, err error) {
	f, err := os.Open(path)
	if err != nil {
		logrus.Errorf("Error while reading file : %s", err)
		return "", err
	}
	finfo, err := f.Stat()
	if err != nil {
		logrus.Errorf("Unable to get stat of file : %s", err)
		return "", err
	}
	if finfo != nil && !finfo.Mode().IsDir() {
		return `"` + path + `" : ` + fmt.Sprintf("%04o", finfo.Mode().Perm()), nil
	}
	dirEntries, err := os.ReadDir(path)
	if err != nil {
		return "", err
	}
	for _, de := range dirEntries {
		fp := filepath.Join(path, de.Name())
		if !isValidName(de.Name()) {
			logrus.Warnf("Filename should not start with . or _ in assets directory. %s will be ignored. Prepend a $ if necessary to override.", fp)
		}
		dep, err := getFilePermissions(fp)
		if err != nil {
			logrus.Errorf("Error while getting file permissions as string : %s", err)
			continue
		}
		if strings.TrimSpace(dep) != "" {
			permissions += strings.TrimSpace(dep) + "\n"
		}
	}
	return permissions, nil
}

func isValidName(name string) bool {
	if strings.HasPrefix(name, ".") || strings.HasPrefix(name, "_") {
		return false
	}
	return true
}
