name: Tag and Release

on:
  workflow_dispatch:
    inputs:
      tag:
        description: "current tag: The tag for this release"
        required: true
        default: v0.1.0-rc.2
      prev_tag:
        description: "previous tag: Tag from which to start calculating the changelog"
        required: false
      commit_ref:
        description: "commit ref: The branch, tag or SHA of the commit to use for the release."
        required: false
        default: main

jobs:
  build_and_test:
    name: Build and test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ github.event.inputs.commit_ref }}
      - id: info
        uses: konveyor/get-env-info@v1
      - uses: actions/setup-go@v2
        with:
          go-version: ${{ steps.info.outputs.go_version }}
      - run: make ci
      - run: make test-coverage
      - name: upload coverage
        uses: codecov/codecov-action@v1
      - if: failure()
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_COLOR: "#BD3232"
          SLACK_ICON: https://github.com/actions.png?size=48
          SLACK_MESSAGE: "Build and test failed for move2kube on tag ${{ github.event.inputs.tag }}"
          SLACK_TITLE: Failed
          SLACK_USERNAME: GitHubActions

  run_move2kube_tests:
    needs: [build_and_test]
    name: Run move2kube tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ github.event.inputs.commit_ref }}
      - id: info
        uses: konveyor/get-env-info@v1
      - name: pull latest image to reuse layers
        run: |
          docker pull quay.io/konveyor/move2kube:latest || true
          docker pull quay.io/konveyor/move2kube-builder:latest || true
      - run: echo "${{ secrets.QUAY_BOT_PASSWORD }}" | docker login --username "${{ secrets.QUAY_BOT_USERNAME }}" --password-stdin quay.io
      - name: build image
        run: GO_VERSION='${{ steps.info.outputs.go_version }}' make cbuild
      - name: push temporary image to quay
        run: |
          docker tag quay.io/konveyor/move2kube:latest quay.io/konveyor/move2kube:${{ github.run_id }}
          docker push quay.io/konveyor/move2kube:${{ github.run_id }}
      - name: run tests in move2kube-tests
        uses: felixp8/dispatch-and-wait@v0.1.0
        with:
          owner: konveyor
          repo: move2kube-tests
          token: ${{ secrets.MOVE2KUBE_PATOKEN }}
          event_type: cli_build
          client_payload: '{"tag": "${{ github.run_id }}"}'
          wait_time: 5
          max_time: 1200
      - if: failure()
        name: delete temporary image from quay
        run: skopeo delete docker://quay.io/konveyor/move2kube:${{ github.run_id }}
      - if: failure()
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_COLOR: "#BD3232"
          SLACK_ICON: https://github.com/actions.png?size=48
          SLACK_MESSAGE: "Tests on move2kube-tests failed for move2kube on tag ${{ github.event.inputs.tag }}"
          SLACK_TITLE: Failed
          SLACK_USERNAME: GitHubActions

  tag:
    needs: [run_move2kube_tests]
    name: Tag
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ github.event.inputs.commit_ref }}
      - id: get_sha
        run: |
          echo "::set-output name=sha::$(git rev-parse HEAD)"
      - uses: actions/github-script@v3
        with:
          github-token: ${{ secrets.MOVE2KUBE_PATOKEN }}
          script: |
            const tag = '${{ github.event.inputs.tag }}';
            const sha = '${{ steps.get_sha.outputs.sha }}';
            // create the tag
            github.git.createRef({
              ...context.repo,
              ref: `refs/tags/${tag}`,
              sha
            });
            if(!tag.endsWith('-beta.0')) {
              return;
            }
            // create the release branch
            const major_minor = /^v(\d+\.\d+)/.exec(tag);
            if(!major_minor || major_minor.length !== 2){
              return core.setFailed(`The tag is not a valid semantic version. tag: ${tag}`);
            }
            const branch_name = `release-${major_minor[1]}`;
            github.git.createRef({
              ...context.repo,
              ref: `refs/heads/${branch_name}`,
              sha
            });

  create_release_draft:
    needs: [tag]
    name: Create release draft
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ github.event.inputs.commit_ref }}
          fetch-depth: 0
      - id: parse_semver
        uses: booxmedialtd/ws-action-parse-semver@v1
        with:
          input_string: ${{ github.event.inputs.tag }}
      - uses: actions/setup-node@v1
        with:
          node-version: "12"
      - name: create release draft
        run: |
          npm install github-release-notes@v0.17.3 -g
          options=()
          if [[ '${{ steps.semver_parser.outputs.prerelease }}' ]] ; then
            options+=( '--prerelease' )
          fi
          if [[ '${{ github.event.inputs.prev_tag }}' ]] ; then
            options+=( '--tags ${{ github.event.inputs.tag }}..${{ github.event.inputs.prev_tag }}' )
          else
            options+=( '--tags ${{ github.event.inputs.tag }}' )
          fi
          gren release --draft "${options[@]}" --username=${{ github.repository_owner }} --repo=${{ github.event.repository.name }} --token=${{ secrets.GITHUB_TOKEN }}
      - id: info
        uses: konveyor/get-env-info@v1
      - uses: actions/setup-go@v2
        with:
          go-version: ${{ steps.info.outputs.go_version }}
      - run: make dist
      - name: upload release assets
        uses: HarikrishnanBalagopal/upload-release-action@v3
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ github.ref }}
          file: _dist/output/*
          file_glob: true
          overwrite: true
      - if: ${{ steps.semver_parser.outputs.prerelease == '' }}
        name: build and release the plugin if it is not a prerelease
        run: make dist-kubectl-translate
      - if: ${{ steps.semver_parser.outputs.prerelease == '' }}
        name: upload plugin release assets
        uses: HarikrishnanBalagopal/upload-release-action@v3
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ github.ref }}
          file: _dist/output/*
          file_glob: true
          overwrite: true
      - name: slack notification
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_ICON: https://github.com/actions.png?size=48
          SLACK_MESSAGE: "Release draft for move2kube ${{ github.event.inputs.tag }} created: https://github.com/konveyor/move2kube/releases"
          SLACK_TITLE: Success
          SLACK_USERNAME: GitHubActions

  image_build:
    needs: [tag]
    name: Image build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ github.event.inputs.commit_ref }}
      - id: info
        uses: konveyor/get-env-info@v1
      - name: pull latest image to reuse layers
        run: |
          docker pull quay.io/konveyor/move2kube:latest || true
          docker pull quay.io/konveyor/move2kube-builder:latest || true
          docker pull quay.io/konveyor/move2kube:${{ github.run_id }}
      - run: echo "${{ secrets.QUAY_BOT_PASSWORD }}" | docker login --username "${{ secrets.QUAY_BOT_USERNAME }}" --password-stdin quay.io
      - name: build container image
        run: VERSION='${{ github.event.inputs.tag }}' GO_VERSION='${{ steps.info.outputs.go_version }}' make cbuild
      - if: always()
        name: delete temporary image from quay
        run: skopeo delete docker://quay.io/konveyor/move2kube:${{ github.run_id }}
      - name: push image to quay
        run: VERSION='${{ github.event.inputs.tag }}' make cpush
      - name: success slack notification
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_ICON: https://github.com/actions.png?size=48
          SLACK_MESSAGE: "Built and pushed quay.io/konveyor/move2kube:${{ github.event.inputs.tag }}"
          SLACK_TITLE: Success
          SLACK_USERNAME: GitHubActions
      - if: failure()
        name: failure slack notification
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_COLOR: "#BD3232"
          SLACK_ICON: https://github.com/actions.png?size=48
          SLACK_MESSAGE: "Failed to build and push image quay.io/konveyor/move2kube:${{ github.event.inputs.tag }}"
          SLACK_TITLE: Failed
          SLACK_USERNAME: GitHubActions

  trigger_other_repos:
    needs: [image_build]
    name: Trigger release in other repos
    runs-on: ubuntu-latest
    steps:
      - uses: actions/github-script@v3
        with:
          github-token: ${{ secrets.MOVE2KUBE_PATOKEN }}
          script: |
            const create_release_workflow = 'release.yml';
            const repos = [
              "move2kube-api",
              "move2kube-operator",
              "move2kube-tests",
            ];
            const promises = repos.map(repo => github.actions.createWorkflowDispatch({
              owner: context.repo.owner,
              repo,
              workflow_id: create_release_workflow,
              ref: context.ref,
              inputs: context.payload.inputs,
            }));
            await Promise.all(promises);

  update_draft_title:
    needs: [create_release_draft, trigger_other_repos]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/github-script@v3
        with:
          github-token: ${{ secrets.MOVE2KUBE_PATOKEN }}
          script: |
            const tag = '${{ github.event.inputs.tag }}';
            const response = await github.repos.listReleases({ ...context.repo });
            const drafts = response.data.filter(release => release.draft && release.tag_name === tag);
            if(drafts.length !== 1) {
              return core.setFailed(`Expected to find exactly one draft release with the tag ${tag}. Found: ${drafts.length}`);
            }
            const draft = drafts[0];
            if(!draft.name.startsWith('[WIP] ')) {
              return core.setFailed(`Expected the draft name to begin with [WIP]. Found: ${draft.name}`);
            }
            const new_name = draft.name.replace(/^\[WIP\] /, '');
            await github.repos.updateRelease({...context.repo, release_id: draft.id, name: new_name});
